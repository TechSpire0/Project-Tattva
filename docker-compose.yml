services:
  # Defines our backend service
  backend:
    container_name: marine_api_service
    # The build context is now the 'backend' sub-directory
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/code
    env_file:
      - ./backend/.env
    depends_on:
      db: { condition: service_healthy }
      minio: { condition: service_healthy }
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Defines our new frontend service
  frontend:
    container_name: marine_ui_service
    platform: linux/amd64
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/
      - /app/node_modules
    environment:
      # This ensures React's hot-reloading works correctly inside Docker
      - WDS_SOCKET_PORT=3000

  # DB and MinIO services are defined as before
  db:
    image: postgis/postgis:15-3.3
    container_name: marine_db_service
    ports: ["5432:5432"]
    volumes: ["postgres_data:/var/lib/postgresql/data/"]
    env_file: ["./backend/.env"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: marine_minio_service
    ports: ["9000:9000", "9001:9001"]
    volumes: ["minio_data:/data"]
    env_file: ["./backend/.env"]
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  minio_data:
