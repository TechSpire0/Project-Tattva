services:
  # Defines our backend service
  backend:
    container_name: marine_api_service
    # --- CHANGE #1: ADD THE PLATFORM KEY HERE ---
    # This tells Docker which architecture to build the image for.
    # Use 'linux/amd64' for Intel/AMD CPUs.
    # Use 'linux/arm64' for Apple Silicon (M1/M2/M3) or other ARM CPUs.
    # platform: linux/amd64 # Or linux/arm64
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/code
    env_file:
      - ./backend/.env
    depends_on:
      db: { condition: service_healthy }
      minio: { condition: service_healthy }
    # --- IMPORTANT NOTE ON GPU ---
    # The 'deploy' section below requires the NVIDIA Container Toolkit to be
    # installed and configured on your host machine.
    # If you DO NOT have an NVIDIA GPU or the toolkit is not installed,
    # this will cause an error. In that case, you should DELETE this
    # entire 'deploy' section.
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Defines our new frontend service
  frontend:
    container_name: marine_ui_service
    # --- CHANGE #2: ADD THE PLATFORM KEY HERE AS WELL ---
    # Ensure this matches the platform you set for the backend.
    platform: linux/amd64 # Or linux/arm64
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      # This anonymous volume is a smart way to protect the container's
      # node_modules from being overwritten by the host. Do not change this.
      - ./frontend:/app/
      - /app/node_modules
    environment:
      - WDS_SOCKET_PORT=3000

  # DB and MinIO services are defined as before
  db:
    image: postgis/postgis:15-3.3
    container_name: marine_db_service
    ports: ["5432:5432"]
    volumes: ["postgres_data:/var/lib/postgresql/data/"]
    env_file: ["./backend/.env"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    # --- RECOMMENDATION ---
    # Using ':latest' can lead to unexpected breaking changes.
    # It's better to pin to a specific version, e.g., 'minio/minio:RELEASE.2024-01-25T05-50-51Z'
    image: minio/minio:latest
    container_name: marine_minio_service
    ports: ["9000:9000", "9001:9001"]
    volumes: ["minio_data:/data"]
    env_file: ["./backend/.env"]
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  minio_data:
