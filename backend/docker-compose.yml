# This is the main block that defines all the services for our application.
services:
  # Defines our FastAPI backend service.
  backend:
    # A static, readable name for the container.
    container_name: marine_api_service
    # Tells Docker Compose to build this service's image using the Dockerfile
    # in the current directory ('.').
    build: .
    # Maps port 8000 on your local machine to port 8000 inside the container.
    ports:
      - "8000:8000"
    # Mounts your entire local project directory into the container's /code directory.
    # This enables live reloading of your Python code.
    volumes:
      - .:/code
    # Loads environment variables from the .env file into this service.
    env_file:
      - ./.env
    # This is a crucial orchestration rule. It tells the 'backend' service
    # not to start until both the 'db' and 'minio' services report that
    # they are healthy and ready for connections.
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    # --- GPU CONFIGURATION ---
    # The 'deploy' key is used for specifying deployment and runtime service settings.
    deploy:
      # This block allows us to define resource constraints and reservations.
      resources:
        # This specifies the resources to reserve for the service.
        reservations:
          # This configures the service to have access to hardware devices.
          devices:
            # - driver: Specifies the device driver to use (nvidia).
            #   count: The number of GPUs to allocate to this container (1).
            #   capabilities: The features to enable for the device (gpu).
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Defines our PostgreSQL database service.
  db:
    # Specifies the pre-built Docker image to use. This one includes PostgreSQL 15
    # and the PostGIS 3.3 extension.
    image: postgis/postgis:15-3.3
    # A static, readable name for the database container.
    container_name: marine_db_service
    # Maps port 5432 (the standard Postgres port) on your local machine
    # to port 5432 inside the container, so you can connect with external tools.
    ports:
      - "5432:5432"
    # Mounts a named volume to persist the database data. This is critical
    # to ensure your data is not lost when the container is stopped or removed.
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # Loads the database credentials (POSTGRES_USER, etc.) from the .env file.
    # The postgres image uses these to initialize the database on first run.
    env_file:
      - ./.env
    # Defines a command that Docker runs periodically to check if the database
    # is ready. The 'depends_on' condition above uses the result of this check.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTG-RES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Defines our MinIO service for object storage.
  minio:
    # Specifies the official MinIO server image.
    image: minio/minio:latest
    # A static, readable name for the MinIO container.
    container_name: marine_minio_service
    # Exposes two ports:
    # 9000 is the port for the S3-compatible API (used by our backend).
    # 9001 is the port for the web-based user interface/console.
    ports:
      - "9000:9000"
      - "9001:9001"
    # Mounts a named volume to persist all the uploaded image data.
    volumes:
      - minio_data:/data
    # Loads the MinIO credentials (MINIO_ROOT_USER, etc.) from the .env file.
    env_file:
      - ./.env
    # The command used to start the MinIO server inside the container.
    # It tells the server where to store its data and which port to use for the console.
    command: server /data --console-address ":9001"
    # Defines a healthcheck to ensure the MinIO service is live and ready.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

# This top-level key formally declares the named volumes we referenced above.
# Docker manages the storage for these volumes.
volumes:
  postgres_data:
  minio_data:
